---
title: "Unsupervised Learning"
format: pdf
editor: visual
editor_options: 
  chunk_output_type: console
---

```{r}
library(data.table)
data_cleaned <- fread(here::here("data", "data_cleaned.csv"))
```

## PCA

```{r, message = F, warning = F}
# Assuming your data frame is named data_cleaned
data_prepared <- data_cleaned %>%
  mutate(across(where(is.character), as.factor)) %>%
  mutate(across(where(is.factor), as.numeric)) %>%
  scale()  # Standardizes numeric data including converted factors

pca_results <- PCA(data_prepared, graph = FALSE)
summary(pca_results)

fviz_pca_biplot(pca_results,
                geom.ind = "point",  # To show data points
                geom.var = c("arrow", "text"),  # To show variable vectors and labels
                col.ind = "cos2",  # Color by the quality of representation
                gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),  # Colors
                repel = TRUE  # Avoid text overlapping
)
```












```{r, message = FALSE, warning = FALSE}
# Remove ID column
data_interest <- data %>%
  dplyr::select(-ID)%>%
  mutate_if(is.integer, as.numeric) %>%  # integers to numeric
  select_if(~ !is.character(.)) %>%
  select_if(~ var(.) != 0)

# Initialize matrices for correlations, p-values
n <- ncol(data_interest)
cor_matrix <- matrix(1, n, n)
p_matrix <- matrix(NA, n, n)
colnames(cor_matrix) <- colnames(data_interest)
rownames(cor_matrix) <- colnames(data_interest)

# Calculating correlations and p-values
for (i in 1:n) {
  for (j in 1:n) {
    if (i != j) {
      test <- cor.test(data_interest[[i]],
                       data_interest[[j]],
                       method = "spearman")
      cor_matrix[i, j] <- test$estimate
      p_matrix[i, j] <- test$p.value
    }
  }
}

# Set a threshold for displaying text on the heatmap
threshold_heatmap <- 0.1  

# Melting the correlation matrix for ggplot
melted_corr <- melt(cor_matrix)

# Creating the heatmap
ggplot(melted_corr, aes(x = Var1, y = Var2, fill = value)) +
  geom_tile() +
  geom_text(aes(label = ifelse(abs(value) > threshold_heatmap,
                               sprintf("%.2f", value), "")), 
            vjust = 0.5, size = 2.5) +
  scale_fill_viridis_c(name = "Spearman\nCorrelation", begin = 0.15) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  labs(title = paste("Heatmap of Spearman Correlations \n(Only correlation values higher than ",
                     threshold_heatmap,
                     " are shown)", sep = ""),
       x = "",
       y = "")
```

```{r}
# Standardize data
data_standardized <- scale(data_interest)

# PCA
pca_result <- prcomp(data_standardized, scale = FALSE)
summary(pca_result)

# Screeplot
fviz_eig(pca_result, addlabels = TRUE, ylim = c(0, 100)) +
  scale_fill_continuous(type = "viridis", begin = 0, end = 1) +
  geom_bar(stat = "identity", fill = "lightblue") +
  ggtitle("PCA - Scree Plot") +
  theme_minimal()

# Eigenvalues
eigenvalues <- pca_result$sdev^2

# Biplot
fviz_pca_biplot(pca_result,
                label = "var",  # Labels for variables
                col.var = "blue",  # Color variables with light blue
                geom = "point",  # Only show points (no text)
                pointsize = 0.1,  # Size of the points
                labelsize = 3,  # Size of text labels
                repel = TRUE) +  # Avoid text overlapping
  ggtitle("PCA - Biplot") +
  theme_minimal()
```

















## Clustering

```{r}
# Using the Elbow Method to determine the number of clusters
set.seed(123)  # Ensure reproducibility
wss <- sapply(1:15, function(k) {
  kmeans(data_standardized, centers=k, nstart=25)$tot.withinss
})
plot(1:15, wss, type="b", pch = 20, frame = FALSE, 
     xlab="Number of clusters K", ylab="Total within-clusters sum of squares")

# Assuming the optimal number of clusters from the plot is, e.g., 3
k <- 3
km_result <- kmeans(data_standardized, centers=k, nstart=25)

# Viewing cluster assignments
print(km_result$cluster)

# Viewing cluster centers
print(km_result$centers)

# Use PCA for dimensionality reduction
fviz_cluster(km_result, data = data_standardized, ellipse.type = "convex")
```