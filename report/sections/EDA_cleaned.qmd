---
format:
  html:
    code-fold: true
    fig-align: center
---

***EDA:***

```{r Packages and data loading cleaned, echo = FALSE, message = FALSE, warning=FALSE}
source(here::here("scripts","setup.R"))
data <- read_csv(here("data","data_cleaned.csv"))
```

**Columns description**

To begin with our EDA, let's have a look at our dataset and in particular the characteristics of the columns.

```{r}
#to get a detailed summary
skim(data)
```

The dataset that we are working with contains approx. 46'000 rows and 26 columns. We can see that most of our features are concerning the consumption of the cars. In addition, we notice that some variables contain a lot of missing and that the variable "Time.to.Charge.EV..hours.at.120v." is only containing 0s. We will be handle these in the section "data cleaning".

**Exploration of the distribution**

Here are more details about the distribution of the numerical features.

```{r, fig.height= 5, fig.width=8}
#  melt.data <- melt(data)
# 
#  ggplot(data = melt.data, aes(x = value)) + 
# stat_density() + 
# facet_wrap(~variable, scales = "free")
plot_histogram(data)# Time.to.Charge.EV..hours.at.120v. not appearing because all observations = 0 
```

We notice that most of our observations of our features are 0s because of the nature of the features. For instance, as most of our cars are not hybrids, they have a unique type of fuel and don't have any type 2, which results in a 0 in the concerned features. Also, some features are numerical discrete, as we can see on the plot of the column "Engine Cylinders".  

**Outliers Detection**

For each one of our numerical column, let's check thank to the boxplot the outliers per feature

```{r, fig.height=10, fig.width=12}
#tentative boxplots

data_long <- data %>%
  select_if(is.numeric) %>%
  pivot_longer(cols = c("model_year", "city_mpg_fuel_type_1", "highway_mpg_fuel_type_1", "city_mpg_fuel_type_2", "highway_mpg_fuel_type_2", "range_ev_city_fuel_type_1", "range_ev_highway_fuel_type_1", "range_ev_city_fuel_type_2", "range_ev_highway_fuel_type_2", "charge_time_240v"), names_to = "variable", values_to = "value")



ggplot(data_long, aes(x = variable, y = value, fill = variable)) +
  geom_boxplot(outlier.size = 0.5) +  # Make outlier points smaller
  facet_wrap(~ variable, scales = "free_y") +  # Each variable gets its own y-axis
  theme_minimal() +
  theme(legend.position = "none",  # Hide the legend
        axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1, size = 0),strip.text = element_text(size = 7)) +  # Rotate x-axis labels
  labs(title = "Boxplots of Variables with Different Scales", x = "", y = "Value")

```

```{r}
#Now 
# plot_correlation(data) #drop time charge EV 120V
# create_report(data)
#nb cars per brand
```

**number of models per make**

As we got rid of XXX, .....

**Correlation matrix for numerical features**


```{r}
#Here I encounter some problems with some of the variables. 

#check NAs
# colSums(is.na(data))

data_corrplot <- data %>%
  select_if(is.numeric)

# Identify constant columns (columns with zero standard deviation)
constant_columns <- sapply(data_corrplot, function(x) sd(x, na.rm = TRUE) == 0)

# Print constant columns for inspection
print("Constant columns (standard deviation is zero):")
print(names(data_corrplot)[constant_columns])

# Remove constant columns
data_corrplot <- data_corrplot[, !constant_columns]

# Correlation transformation for plot using complete observations
cor_matrix <- cor(data_corrplot, use = "complete.obs")

# Melt correlation matrix for plotting
cor_melted <- melt(cor_matrix)

# Plot correlation matrix heatmap using ggplot2
ggplot(data = cor_melted, aes(Var1, Var2, fill = value)) +
  geom_tile(color = "white") +
  scale_fill_gradient2(low = "blue", high = "red", mid = "white",
                       midpoint = 0, limit = c(-1, 1), space = "Lab",
                       name = "Pearson\nCorrelation") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, size = 8, hjust = 1),
        axis.text.y = element_text(size = 8)) +
  coord_fixed() +
  labs(x = '', y = '', title = 'Correlation Matrix Heatmap')

```


